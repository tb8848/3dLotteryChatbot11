(function ($) {
    $.fn.extend({
        i18n: function (options) {
            var defaults = {
                lang: "",
                defaultLang: "",
                filePath: "/i18n/",
                filePrefix: "i18n_",
                fileSuffix: "",
                forever: true,
                callback: function () {
                }
            };

            function checkKeyNamespace(key) {
                var regDot = /\./;
                if (regDot.test(key)) {
                    var fullname = '';
                    var names = key.split(/\./);
                    for (var i = 0, j = names.length; i < j; i++) {
                        var name = names[i];

                        if (i > 0) {
                            fullname += '.';
                        }

                        fullname += name;
                        if (eval('typeof ' + fullname + ' == "undefined"')) {
                            eval(fullname + '={};');
                        }
                    }
                }
            }

            function parseData(data) {
                var jsonData = {};
                var parsed = '';
                var lines = data.split(/\n/);
                var regPlaceHolder = /(\{\d+})/g;
                var regRepPlaceHolder = /\{(\d+)}/g;
                var unicodeRE = /(\\u.{4})/ig;
                for (var i = 0, j = lines.length; i < j; i++) {
                    var line = lines[i];
                    line = line.trim();
                    if (line.length > 0 && line.match("^#") != "#") { // skip comments
                        var pair = line.split('=');
                        if (pair.length > 0) {
                            /** Process key & value */
                            var name = decodeURI(pair[0]).trim();
                            var value = pair.length == 1 ? "" : pair[1];
                            // process multi-line values
                            while (value.search(/\\$/) != -1) {
                                value = value.substring(0, value.length - 1);
                                value += lines[++i].trimRight();
                            }
                            // Put values with embedded '='s back together
                            for (var s = 2; s < pair.length; s++) {
                                value += '=' + pair[s];
                            }
                            value = value.trim();
                            jsonData[name]=value;

                            /** Mode: bundle keys in a map */
                            // if (settings.mode == 'map' || settings.mode == 'both') {
                            //     // handle unicode chars possibly left out
                            //     var unicodeMatches = value.match(unicodeRE);
                            //     if (unicodeMatches) {
                            //         unicodeMatches.forEach(function (match) {
                            //             value = value.replace(match, unescapeUnicode(match));
                            //         });
                            //     }
                            //     // add to map
                            //     if (settings.namespace) {
                            //         $.i18n.map[settings.namespace][name] = value;
                            //     } else {
                            //         $.i18n.map[name] = value;
                            //     }
                            // }

                            /** Mode: bundle keys as vars/functions */
                            // if (settings.mode == 'vars' || settings.mode == 'both') {
                            //     value = value.replace(/"/g, '\\"'); // escape quotation mark (")
                            //
                            //     // make sure namespaced key exists (eg, 'some.key')
                            //     checkKeyNamespace(name);
                            //
                            //     // value with variable substitutions
                            //     if (regPlaceHolder.test(value)) {
                            //         var parts = value.split(regPlaceHolder);
                            //         // process function args
                            //         var first = true;
                            //         var fnArgs = '';
                            //         var usedArgs = [];
                            //         parts.forEach(function (part) {
                            //
                            //             if (regPlaceHolder.test(part) && (usedArgs.length === 0 || usedArgs.indexOf(part) == -1)) {
                            //                 if (!first) {
                            //                     fnArgs += ',';
                            //                 }
                            //                 fnArgs += part.replace(regRepPlaceHolder, 'v$1');
                            //                 usedArgs.push(part);
                            //                 first = false;
                            //             }
                            //         });
                            //         parsed += name + '=function(' + fnArgs + '){';
                            //         // process function body
                            //         var fnExpr = '"' + value.replace(regRepPlaceHolder, '"+v$1+"') + '"';
                            //         parsed += 'return ' + fnExpr + ';' + '};';
                            //         // simple value
                            //     } else {
                            //         parsed += name + '="' + value + '";';
                            //     }
                            // } // END: Mode: bundle keys as vars/functions
                        } // END: if(pair.length > 0)
                    } // END: skip comments
                }
                //eval(parsed);
                return jsonData;
                //settings.filesLoaded += 1;
            }

            function getCookie(name) {
                var arr = document.cookie.split('; ');
                for (var i = 0; i < arr.length; i++) {
                    var arr1 = arr[i].split('=');
                    if (arr1[0] == name) {
                        return arr1[1]
                    }
                }
                return ''
            };

            function setCookie(name, value, myDay) {
                var oDate = new Date();
                oDate.setDate(oDate.getDate() + myDay);
                document.cookie = name + '=' + value + '; expires=' + oDate
            };var options = $.extend(defaults, options);
            if (getCookie('i18n_lang') != "" && getCookie('i18n_lang') != "undefined" && getCookie('i18n_lang') != null) {
                defaults.defaultLang = getCookie('i18n_lang')
            } else if (options.lang == "" && defaults.defaultLang == "") {
                throw"defaultLang must not be null !"
            }
            ;
            if (options.lang != null && options.lang != "") {
                if (options.forever) {
                    setCookie('i18n_lang', options.lang)
                } else {
                    $.removeCookie("i18n_lang")
                }
            } else {
                options.lang = defaults.defaultLang
            }
            ;var i = this;

            var filename = options.filePath + options.filePrefix + options.lang + options.fileSuffix + ".properties";
            console.log("=================filename = ",filename);
            $.ajax({
                url: filename,
                // async: ,
                // cache: settings.cache,
                dataType: 'text',
                success: function (data, status) {
                    var i18nLang = {};
                    if (data != null) {
                        i18nLang = parseData(data)
                    }
                    $(i).each(function (i) {
                        var i18nOnly = $(this).attr("i18n-only");
                        if ($(this).val() != null && $(this).val() != "") {
                            if (i18nOnly == null || i18nOnly == undefined || i18nOnly == "" || i18nOnly == "value") {
                                $(this).val(i18nLang[$(this).attr("i18n")])
                            }
                        }
                        if ($(this).html() != null && $(this).html() != "") {
                            if (i18nOnly == null || i18nOnly == undefined || i18nOnly == "" || i18nOnly == "html") {
                                $(this).html(i18nLang[$(this).attr("i18n")])
                            }
                        }
                        if ($(this).attr('placeholder') != null && $(this).attr('placeholder') != "") {
                            if (i18nOnly == null || i18nOnly == undefined || i18nOnly == "" || i18nOnly == "placeholder") {
                                $(this).attr('placeholder', i18nLang[$(this).attr("i18n")])
                            }
                        }
                    });
                    options.callback()
                },
            });

            // $.getJSON(options.filePath + options.filePrefix + options.lang + options.fileSuffix + ".json", function (data) {
            //     var i18nLang = {};
            //     if (data != null) {
            //         i18nLang = data
            //     }
            //     $(i).each(function (i) {
            //         var i18nOnly = $(this).attr("i18n-only");
            //         if ($(this).val() != null && $(this).val() != "") {
            //             if (i18nOnly == null || i18nOnly == undefined || i18nOnly == "" || i18nOnly == "value") {
            //                 $(this).val(i18nLang[$(this).attr("i18n")])
            //             }
            //         }
            //         if ($(this).html() != null && $(this).html() != "") {
            //             if (i18nOnly == null || i18nOnly == undefined || i18nOnly == "" || i18nOnly == "html") {
            //                 $(this).html(i18nLang[$(this).attr("i18n")])
            //             }
            //         }
            //         if ($(this).attr('placeholder') != null && $(this).attr('placeholder') != "") {
            //             if (i18nOnly == null || i18nOnly == undefined || i18nOnly == "" || i18nOnly == "placeholder") {
            //                 $(this).attr('placeholder', i18nLang[$(this).attr("i18n")])
            //             }
            //         }
            //     });
            //     options.callback()
            // })
        }
    })
})(jQuery);